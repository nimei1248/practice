思考、think、概念、原理:
1.excle and db区别是什么？
2.关系型数据库RDBMS(如,oracle、mysql)与非关系型数据库NoSQL(mongodb、redis、memcached)区别？
2.关系型数据库事务概念
3.事务特点:
  a.ACID: 原子性、一致性、隔离性、持久性
  b.事务要么全部执行,要么全不执行,commit
  c.事务支持回滚,回到更新前的状态,rollback
  d.事务是一套逻辑,需求不同,具体的逻辑也不同
  e.事务和事务之间的隔离性确保事务之间互不影响
  f.没有commit操作,一个事务就没有成功提交/执行
  g.select时数据当时是什么状态就是什么状态
  h.行锁、表锁
  i.如何保证断电后,数据还能恢复?利用日志功能,事务操作会写日志
  j.select和更新都会有锁

MongoDB 或者 redis 可以替代 memcached 吗?
1.先去了解一下三个工具各自的特性，无所谓谁替代谁，毕竟在最恰当的场景使用最恰当的工具才是最好的选择
2.mongodb redis mysql memcached 在不同场景选择性使用或结合使用，效果更佳 




                                        第4章 MySQL 中的运算符
MySQL 支持多种类型的运算符,来连接表达式的项:
这些类型主要包括算术运算符、比较 运算符、逻辑运算符和位运符

4.1 算术运算符
MySQL 支持的算术运算符包括加、减、乘、除和模运算。它们是最常使用、最简单的一类 运算符。表 4-1 列出了这些运算符及其作用。

表 4-1 MySQL 支持的算术运算符
下例中简单地 述了这几种运算符的使用方法:
运算符    作用
+         加法
-         减法
*         乘法
/,DIV     除法,返回商
%,MOD     除法,返回余数


下例中简单地 述了这几种运算符的使用方法:
mysql> select 0.1 + 0.3333, 0.1 - 0.3333, 0.1 * 0.3333, 1 / 2, 1 % 2;
+--------------+--------------+--------------+--------+-------+
| 0.1 + 0.3333 | 0.1 - 0.3333 | 0.1 * 0.3333 | 1 / 2  | 1 % 2 |
+--------------+--------------+--------------+--------+-------+
|       0.4333 |      -0.2333 |      0.03333 | 0.5000 |     1 |
+--------------+--------------+--------------+--------+-------+
1 row in set (0.02 sec)


1. +运算符用于获得一个或多个值的和
2. -运算符用于从一个值中减去另一个值
3. *运算符使数字相乘,得到两个或多个值的乘积
4. /运算符用一个值除以另一个值得到商
5. %运算符用一个值除以另外一个值得到余数


除法运算和模运算中,如果除数为 0,将是非法除数,返回结果为 NULL,如下例所示:
mysql> select 1 / 0, 100 % 0;
+-------+---------+
| 1 / 0 | 100 % 0 |
+-------+---------+
|  NULL |    NULL |
+-------+---------+
1 row in set, 2 warnings (0.02 sec)


对于模运算,还有另外一种表达方式,使用 MOD(a,b)函数与 a%b 效果一样:
mysql> select 3 % 2, mod(3,2);
+-------+----------+
| 3 % 2 | mod(3,2) |
+-------+----------+
|     1 |        1 |
+-------+----------+
1 row in set (0.00 sec)




4.2 比较运算符
熟悉了最简单的算术运算符,再来看一下比较运算符
当使用 SELECT 语句进行查询时,MySQL 允许用户对表达式的左边操作数和右边操作数进行比较,比较结果为真,则返回 1,为假则 返回 0,比较结果不确定则返回 NULL

表 4-2 列出了 MySQL 5.0 支持的各种比较运算符
表 4-2 MySQL 支持的比较运算符
 
运算符		   作用
=		   等于
<>或!=		   不等于
<=>		   NULL 安全的等于(NULL-safe)
<		   小于
<=		   小于等于
>		   大于
>=		   大于等于
BETWEEN		   存在与指定范围
IN		   存在于指定集合
IS NULL		   为 NULL
IS NOT NULL	   不为 NULL
LIKE		   通配符匹配
REGEXP 或 RLIKE    正则表达式匹配


比较运算符可以用于比较数字、字符串和表达式。数字作为浮点数比较,而字符串以不 区分大小写的方式进行比较
下面通过实例来学习各种比较运算符的使用。

1.“=”运算符,用于比较运算符两侧的操作数是否相等,如果两侧操作数相等返回值为 1, 否则为 0。注意 NULL 不能用于“=”比较
mysql> select 1 = 0, 1 = 1, NULL = NULL;
+-------+-------+-------------+
| 1 = 0 | 1 = 1 | NULL = NULL |
+-------+-------+-------------+
|     0 |     1 |        NULL |
+-------+-------+-------------+
1 row in set (0.01 sec)


2.“<>”运算符,和“=”相反,如果两侧操作数不等,则值为1,否则为0。NULL不能 用于“<>”比较
mysql> select 1 <> 0, 1 <> 1, NULL <> NULL;
+--------+--------+--------------+
| 1 <> 0 | 1 <> 1 | NULL <> NULL |
+--------+--------+--------------+
|      1 |      0 |         NULL |
+--------+--------+--------------+
1 row in set (0.00 sec)

mysql> select 1 != 0, 1 != 1, NULL != NULL;    
+--------+--------+--------------+
| 1 != 0 | 1 != 1 | NULL != NULL |
+--------+--------+--------------+
|      1 |      0 |         NULL |
+--------+--------+--------------+
1 row in set (0.00 sec)


3.“<=>”安全的等于运算符,和“=”类似,在操作数相等时值为 1,不同之处在于即使 操作的值为 NULL 也可以正确比较
mysql> select 1 <=> 1, 2 <=> 0, 0 <=> 0, NULL <=> NULL;
+---------+---------+---------+---------------+
| 1 <=> 1 | 2 <=> 0 | 0 <=> 0 | NULL <=> NULL |
+---------+---------+---------+---------------+
|       1 |       0 |       1 |             1 |
+---------+---------+---------+---------------+
1 row in set (0.00 sec)


4.“<”运算符,当左侧操作数小于右侧操作数时,其返回值为1,否则其值为0
  可以对字符串进行比较,按照26个字母顺序,左边小于右边
mysql> select 'a' < 'b', 'a' < 'a', 'a' < 'c', 1 < 2;
+-----------+-----------+-----------+-------+
| 'a' < 'b' | 'a' < 'a' | 'a' < 'c' | 1 < 2 |
+-----------+-----------+-----------+-------+
|         1 |         0 |         1 |     1 |
+-----------+-----------+-----------+-------+
1 row in set (0.00 sec)

  字符比较不区分大小写，或大小写是一样的
mysql> select 'a' < 'A', 'a' < 'a', 'a' < 'C', 1 < 2; 
+-----------+-----------+-----------+-------+
| 'a' < 'A' | 'a' < 'a' | 'a' < 'C' | 1 < 2 |
+-----------+-----------+-----------+-------+
|         0 |         0 |         1 |     1 |
+-----------+-----------+-----------+-------+
1 row in set (0.00 sec)

mysql> select 'a' = 'A', 'a' < 'a', 'a' < 'C', 1 < 2; 
+-----------+-----------+-----------+-------+
| 'a' = 'A' | 'a' < 'a' | 'a' < 'C' | 1 < 2 |
+-----------+-----------+-----------+-------+
|         1 |         0 |         1 |     1 |
+-----------+-----------+-----------+-------+
1 row in set (0.01 sec)


5.  “<=”运算符,当左侧操作数小于等于右侧操作数时,其返回值为 1,否则返回值为 0
mysql> select 'bdf' <= 'b', 'b' <= 'b', 0 < 1;
+--------------+------------+-------+
| 'bdf' <= 'b' | 'b' <= 'b' | 0 < 1 |
+--------------+------------+-------+
|            0 |          1 |     1 |
+--------------+------------+-------+
1 row in set (0.01 sec)

mysql> select 'bdf' <= 'b', 'b' <= 'b', 0 <= 1;
+--------------+------------+--------+
| 'bdf' <= 'b' | 'b' <= 'b' | 0 <= 1 |
+--------------+------------+--------+
|            0 |          1 |      1 |
+--------------+------------+--------+
1 row in set (0.00 sec)


6.  “>”运算符,当左侧操作数大于右侧操作数时,其返回值为 1,否则返回值为 0
mysql> select 'a' > 'b', 'abc' > 'a', 1 > 0;
+-----------+-------------+-------+
| 'a' > 'b' | 'abc' > 'a' | 1 > 0 |
+-----------+-------------+-------+
|         0 |           1 |     1 |
+-----------+-------------+-------+
1 row in set (0.00 sec)


7.  “>=”运算符,当左侧操作数大于等于右侧操作数时,其返回值为 1,否则返回值为 0
mysql> select 'a' >= 'b', 'abc' >= 'a', 1 >= 0, 1 >= 1;
+------------+--------------+--------+--------+
| 'a' >= 'b' | 'abc' >= 'a' | 1 >= 0 | 1 >= 1 |
+------------+--------------+--------+--------+
|          0 |            1 |      1 |      1 |
+------------+--------------+--------+--------+
1 row in set (0.00 sec)


8.“BETWEEN”运算符的使用格式为“a BETWEEN min AND max”:
  a.当 a 大于等于 min 并且小于等于 max,则返回值为 1,否则返回 0;
  b.当操作数 a、min、max 类型相同时,此 表达式等价于(a>=min and a<=max)
  c.当操作数类型不同时,比较时会遵循类型转换原则进行转换后,再进行比较运算

下例中 述了 BETWEEN 的用法:
mysql> select 10 between 10 and 20, 9 between 10 and 20;
+----------------------+---------------------+
| 10 between 10 and 20 | 9 between 10 and 20 |
+----------------------+---------------------+
|                    1 |                   0 |
+----------------------+---------------------+
1 row in set (0.00 sec)

mysql> select 10 between 10 and 20, a between 10 and 20;
ERROR 1054 (42S22): Unknown column 'a' in 'field list'

mysql> select 10 between 10 and 20, 'a' between 10 and 20;
+----------------------+-----------------------+
| 10 between 10 and 20 | 'a' between 10 and 20 |
+----------------------+-----------------------+
|                    1 |                     0 |
+----------------------+-----------------------+
1 row in set, 1 warning (0.00 sec)

mysql> select 10 between 10 and 20, 'z' between 10 and 20;
+----------------------+-----------------------+
| 10 between 10 and 20 | 'z' between 10 and 20 |
+----------------------+-----------------------+
|                    1 |                     0 |
+----------------------+-----------------------+
1 row in set, 1 warning (0.00 sec)

mysql> select 10 between 10 and 20, 'z' between 'a' and 20;
+----------------------+------------------------+
| 10 between 10 and 20 | 'z' between 'a' and 20 |
+----------------------+------------------------+
|                    1 |                      1 |
+----------------------+------------------------+
1 row in set, 2 warnings (0.00 sec)


9.“IN”运算符的使用格式为“a IN (value1,value2,...)”,当a的值存在于列表中时,则整 个比较表达式返回的值为 1,否则返回 0
mysql> select 1 in (1,2,3), 't' in ('t','a','b','1','e'), 0 in (1,2);
+--------------+------------------------------+------------+
| 1 in (1,2,3) | 't' in ('t','a','b','1','e') | 0 in (1,2) |
+--------------+------------------------------+------------+
|            1 |                            1 |          0 |
+--------------+------------------------------+------------+
1 row in set (0.00 sec)


10. not in
mysql> select 1 not in (1,2,3), 't' in ('t','a','b','1','e'), 0 in (1,2);
+------------------+------------------------------+------------+
| 1 not in (1,2,3) | 't' in ('t','a','b','1','e') | 0 in (1,2) |
+------------------+------------------------------+------------+
|                0 |                            1 |          0 |
+------------------+------------------------------+------------+
1 row in set (0.00 sec)


11.“IS NULL”运算符的使用格式为“a IS NULL”,当 a 的值为 NULL,则返回值为 1,否则 返回 0
mysql> select 0 is null, null is null;
+-----------+--------------+
| 0 is null | null is null |
+-----------+--------------+
|         0 |            1 |
+-----------+--------------+
1 row in set (0.00 sec)


12.“IS NOT NULL”运算符的使用格式为“a IS NOT NULL”。和“IS NULL”相反,当 a 的 值不为 NULL,则返回值为 1,否则返回 0
mysql> select 0 is not null, null is not null;
+---------------+------------------+
| 0 is not null | null is not null |
+---------------+------------------+
|             1 |                0 |
+---------------+------------------+
1 row in set (0.00 sec)


13.“LIKE”运算符的使用格式为“a LIKE %123%”,当a中含有字符串“123”时,则返回 值为 1,否则返回 0
   需要1段连续的字符
mysql> select 123456 like '123%', 123456 like '%123%', 123456 like '%321%';
+--------------------+---------------------+---------------------+
| 123456 like '123%' | 123456 like '%123%' | 123456 like '%321%' |
+--------------------+---------------------+---------------------+
|                  1 |                   1 |                   0 |
+--------------------+---------------------+---------------------+
1 row in set (0.00 sec)


14.“REGEXP”运算符的使用格式为“str REGEXP str_pat”,当 str 字符串中含有 str_pat 相匹配的字符串时,则返回值为 1,否则返回 0
   REGEXP 运算符的使用方法将会在第 17 章中详细介绍
mysql> select 'abcdef' regexp 'ab', 'abcdefg' regexp 'k';
+----------------------+----------------------+
| 'abcdef' regexp 'ab' | 'abcdefg' regexp 'k' |
+----------------------+----------------------+
|                    1 |                    0 |
+----------------------+----------------------+
1 row in set (0.00 sec)




4.3 逻辑运算符 逻辑运算符又称为布尔运算符,用来确认表达式的真和假
MySQL 支持 4 种逻辑运算符,如表 4-3 所示

表 4-3 MySQL 中的逻辑运算符
运算符     作用
NOT 或!    逻辑非
AND 或&&   逻辑与
OR 或 ||   逻辑或
XOR        逻辑异或


1.“NOT”或“!”表示逻辑非
  返回和操作数相反的结果:当操作数为 0(假),则返回 值为 1,否则值为 0
  但是有一点除外,那就是 NOT NULL 的返回值为 NULL

mysql> select not 0, not 1, not null;
+-------+-------+----------+
| not 0 | not 1 | not null |
+-------+-------+----------+
|     1 |     0 |     NULL |
+-------+-------+----------+
1 row in set (0.00 sec)


2.“AND”或“&&”表示逻辑与运算
  当所有操作数均为非零值并且不为NULL时,计算所得结果为1,
  当一个或多个操作数为 0 时,所得结果为 0
  操作数中有任何一个为 NULL 则返回值为 NULL

mysql> select (1 and 1), (0 and 1), (3 and 1), (1 and null);
+-----------+-----------+-----------+--------------+
| (1 and 1) | (0 and 1) | (3 and 1) | (1 and null) |
+-----------+-----------+-----------+--------------+
|         1 |         0 |         1 |         NULL |
+-----------+-----------+-----------+--------------+
1 row in set (0.00 sec)


3.“OR”或“||”表示逻辑或运算
   当两个操作数均为非 NULL 值时,如有任意一个操作数为非零值,则结果为 1,否则结果为 0
   当有一个操作数为 NULL 时,如另一个操作数为非零值,则结果为 1,否则结果为 NULL
   假如两个操作数均为 NULL,则所得结果 为 NULL

mysql> select (1 or 0), (0 or 0), (1 or null), (null or null);
+----------+----------+-------------+----------------+
| (1 or 0) | (0 or 0) | (1 or null) | (null or null) |
+----------+----------+-------------+----------------+
|        1 |        0 |           1 |           NULL |
+----------+----------+-------------+----------------+
1 row in set (0.00 sec)


4.“XOR”表示逻辑异或
   a.当任意一个操作数为 NULL 时,返回值为 NULL
   b.对于非NULL的操作数,如果两个的逻辑真假值相异,则返回结果 1;否则返回 0

mysql> select 1 xor 1, 0 xor 0, 1 xor 0, 0 xor 1, null xor 1;
+---------+---------+---------+---------+------------+
| 1 xor 1 | 0 xor 0 | 1 xor 0 | 0 xor 1 | null xor 1 |
+---------+---------+---------+---------+------------+
|       0 |       0 |       1 |       1 |       NULL |
+---------+---------+---------+---------+------------+
1 row in set (0.00 sec)




4.4 位运算符
位运算是将给定的操作数转化为二进制后,对各个操作数每一位都进行指定的逻辑运算, 得到的二进制结果转换为十进制数后就是位运算的结果

MySQL 5.0 支持 6 种位运算符, 如表 4-4 所示
MySQL 支持的位运算符:
运算符        作用
&             位与(位 AND)
|             位或 (位 OR )
^             位异或(位 XOR)
~             位取反
>>            位右移
<<            位左移

可以发现,位运算符中的位与“&”和位或“|”和前面介绍的逻辑与和逻辑或非常类似

其它操作符和逻辑操作有所不同,下面将分别举例介绍:

1.位与：对应的二进制位都为1，则该位的运算结果为1；否则，对应的二进制位有一个1或者都为0，则该位的运算结果为0
“位与”对多个操作数的二进制位作逻辑与操作,例如 2&3,因为 2 的二进制数是 10,3 是 11,所以 10&11 的结果是 10,十进制数字还是 2,来看实际结果
mysql> select 2 & 3;
+-------+
| 2 & 3 |
+-------+
|     2 |
+-------+
1 row in set (0.01 sec)


可以对 2 个以上操作数做或操作,测试一下 2&3&4,因为 4 的二进制是 100,和上面的 10 做与操作 100&010 后,结果应该是 000,可以看实际结果为:
mysql> select 2 & 3 & 4;
+-----------+
| 2 & 3 & 4 |
+-----------+
|         0 |
+-----------+
1 row in set (0.00 sec)


2.对应的二进制位有一个或两个为1，则该位的运算结果为1；否则对应的二进制位有两个0时，该位的运算结果为0
“位或”对多个操作数的二进制位作逻辑或操作,还是上面的例子,2|3 的结果应该是 10|11,结果还是 11,应该是 3,实际结果如下:
mysql> select 2 | 3;
+-------+
| 2 | 3 |
+-------+
|     3 |
+-------+
1 row in set (0.00 sec)

mysql> select 2 | 3 | 4;
+-----------+
| 2 | 3 | 4 |
+-----------+
|         7 |
+-----------+
1 row in set (0.00 sec)


3.对应位的二进制数不同时，对应位的结果才为1；如果两个对应位数都为0或者都为1，则对应位的结果为0
“位异或”对操作数的二进制位做异或操作,10^11 的结果是 01,结果应该是 1,可以 看实际结果为:
mysql> select 2 ^ 3;
+-------+
| 2 ^ 3 |
+-------+
|     1 |
+-------+
1 row in set (0.00 sec)

mysql> select 2 ^ 3 ^ 4;
+-----------+
| 2 ^ 3 ^ 4 |
+-----------+
|         5 |
+-----------+
1 row in set (0.00 sec)


4.每位，1取反后变成0，0取反后变成1
“位取反”对操作数的二进制位作 NOT 操作,这里的操作数只能是一位,下面看一个经 典的取反例子:对 1 做位取反:

mysql> select ~ 1;
+----------------------+
| ~ 1                  |
+----------------------+
| 18446744073709551614 |
+----------------------+
1 row in set (0.00 sec)

mysql> select ~ 1, ~ 18446744073709551614;
+----------------------+------------------------+
| ~ 1                  | ~ 18446744073709551614 |
+----------------------+------------------------+
| 18446744073709551614 |                      1 |
+----------------------+------------------------+
1 row in set (0.00 sec)


结果让大家可能有些疑惑,1 的位取反怎么会是这么大的数字?来研究一下,
在 MySQL 中, 常量数字默认会以 8 个字节来表示,8 个字节就是 64 位,常量 1 的二进制表示为 63 个“0” 加 1 个“1”,
位取反后就是 63 个“1”加一个“0”,转换为二进制后就是 18446744073709551614, 实际结果如下:


取十进制对应的二进制:
mysql> select bin(18446744073709551614);
+------------------------------------------------------------------+
| bin(18446744073709551614)                                        |
+------------------------------------------------------------------+
| 1111111111111111111111111111111111111111111111111111111111111110 |
+------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql> select bin(1);
+--------+
| bin(1) |
+--------+
| 1      |
+--------+
1 row in set (0.00 sec)

mysql> select bin(2);
+--------+
| bin(2) |
+--------+
| 10     |
+--------+
1 row in set (0.00 sec)


mysql> select 5 & ~ 1;
+---------+
| 5 & ~ 1 |
+---------+
|       4 |
+---------+
1 row in set (0.00 sec)

mysql> select bin(18446744073709551614);
+------------------------------------------------------------------+
| bin(18446744073709551614)                                        |
+------------------------------------------------------------------+
| 1111111111111111111111111111111111111111111111111111111111111110 |
+------------------------------------------------------------------+
1 row in set (0.00 sec)

0      0     0     0    0   0   0   0
128    64    32    16   8   4   2   1

1111111111111111111111111111111111111111111111111111111111111110
0000000000000000000000000000000000000000000000000000000000000101
——————————————————————————--------------------------------------
0000000000000000000000000000000000000000000000000000000000000100 = 4


5.“>>”表示按位右移。“m>>n”表示m的二进制数向右移n位，左边补上n个0。例如，二进制数011右移1位后变成001，最后一个1被移出去了，直接就不要了
“位右移”对左操作数向右移动右操作数指定的位数
例如 100>>3,就是对 100 的二进 制数 01100100 右移 3 位,左边补 0,结果是 0000001100,转换为二进制数是 12,实 际结果如下:

16移动4位变成4:
0001 0000
0000 0100

1移动1位变成0
0000 0001
0000 0000

100移动3位变成12
0110 0100
0000 1100

mysql> select 100 >> 3;
+----------+
| 100 >> 3 |
+----------+
|       12 |
+----------+
1 row in set (0.00 sec)

mysql> select 1 >> 1;
+--------+
| 1 >> 1 |
+--------+
|      0 |
+--------+
1 row in set (0.00 sec)

mysql> select 16 >> 2;
+---------+
| 16 >> 2 |
+---------+
|       4 |
+---------+
1 row in set (0.00 sec)

mysql> select 100 >> 3;
+----------+
| 100 >> 3 |
+----------+
|       12 |
+----------+
1 row in set (0.00 sec)


总结：150移动4位,将8位的前面4位覆盖后面的4位,前面4位变成0，再次得到十进制数：
1001 0110 >> 4:
0000 1001 = 9

mysql> select 150 >> 4;
+----------+
| 150 >> 4 |
+----------+
|        9 |
+----------+
1 row in set (0.00 sec)


6.“<<”表示按位左移。“m<<n”表示m的二进制数向左移n位，右边补上n个0。例如，二进制数001左移1位后将变成0010
将后面的位数移动到前面相等的位数,然后将后面的位数变成0,再计算十进制:
“位左移”对左操作数向左移动右操作数指定的位数。例如 100<<3,就是对 100 的二进 制数 0001100100 左移 3 位,右边补 0,结果是 1100100000,转换为二进制数是 800, 实际结果如下:
mysql> select 100 << 3;
+----------+
| 100 << 3 |
+----------+
|      800 |
+----------+
1 row in set (0.00 sec)

mysql> select 1 << 1;
+--------+
| 1 << 1 |
+--------+
|      2 |
+--------+
1 row in set (0.00 sec)

mysql> select 1 << 2;
+--------+
| 1 << 2 |
+--------+
|      4 |
+--------+
1 row in set (0.00 sec)

100 << 3
0110 0100 << 3

0000 0000 0110 0100 = 100

将十进制100转换成二进制,同时将二进制整体向左移动3位：
这里分开计算:
第一次将末尾的100，向左移动3位,变成：
0000 0000 0110 0100 = 100
0000 0000 0010 0000 第一次移动100，第2次移动将之前末尾100的前面所有数再往前移动： 
0000 0011 0010 0000 第2次移动0000 0000 0110 0


0000 0011 0010 0000 = 800  至于这个是怎么算出800的可以通过工具算出http://cn.calcuworld.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%AE%A1%E7%AE%97%E5%99%A8


注意: 位运算都是对应位上运算，如数1的第一位只与数2的第一位进行运算，数1的第二位只与数2的第二位进行运算



4.5 运算符的优先级
前面介绍了 MySQL 支持的各种运算符的使用方法。在实际应用中,很可能将这些运算符进 行混合运算,那么应该先进行哪些运算符的操作呢?
表 4-5 中列出了所有的运算符,优先级 由低到高排列,同一行中的运算符具有相同的优先级

表 4-5 MySQL 中的运算符优先级
优先级顺序             运算符
1                      :=
2                      ||, OR, XOR
3                      &&, AND
4                      NOT
5                      BETWEEN, CASE, WHEN, THEN, ELSE
6                      =, <=>, >=, >, <=, <, <>, !=, IS, LIKE, REGEXP, IN
7                      |
8                      &
9                      <<, >>
10                     -, +
11                     *, /, DIV, %, MOD
12                     ^
13                     - (一元减号), ~ (一元比特反转)
14                     !

在实际运行的时候,可以参考表 4-5 中的优先级。实际上,很少有人能将这些优先级熟练记忆,很多情况下我们都是用“()”来将需要优先的操作括起来,
这样既起到了优先的作用, 又使得其他用户看起来更加易于理解。



4.6 小结
本章主要介绍了 MySQL 中支持的各种运算符
这些运算符可以帮助用户完成算术、比较、 逻辑和位逻辑操作,大家在使用时要注意运算符的优先级
另外,在使用比较运算符时要保证比较的操作数类型是一致的,这样可以避免由于操作数类型的不一致而得出错误的数据。
