                                                                            第5章  常用函数


经常编写程序的朋友一定体会得到函数的重要性,丰富的函数往往能使用户的工作事半功倍
函数能帮助用户做很多事情,比如说字符串的处理、数值的运算、日期的运算等,
在这方面 MySQL 供了多种内建函数帮助开发人员编写简单快捷的 SQL 语句,其中常用的函数有字符串函数、日期函数和数值函数。
在 MySQL 数据库中,函数可以用在 SELECT 语句及其子句(例如 where、order by、having 等) 中,也可以用在 UPDATE、DELETE 语句及其子句中


5.1 字符串函数
字符串函数是最常用的一种函数了,如果大家编写过程序的话,不妨回过头去看看自己使用 过的函数,可能会惊讶地发现字符串处理的相关函数占已使用过的函数很大一部分

MySQL 中字符串函数也是最丰富的一类函数,表 5-1 中列出了这些函数以供参考。
表 5-1 MySQL 中的常用字符串函数
函数                       功能
CANCAT(S1,S2,...Sn)        连接 S1,S2,...Sn 为一个字符串 字符串拼接
INSERT(str,x,y,instr)      将字符串 str 从第 x 位置开始,y 个字符长的子串替换为字符串 instr
LOWER(str)                 将字符串 str 中所有字符变为小写
UPPER(str)                 将字符串 str 中所有字符变为大写
LEFT(str ,x)               返回字符串 str 最左边的 x 个字符
RIGHT(str,x)               返回字符串 str 最右边的 x 个字符
LPAD(str,n ,pad)           用字符串 pad 对 str 最左边进行填充,直到长度为 n 个字符长度
RPAD(str,n,pad)            用字符串 pad 对 str 最右边进行填充,直到长度为 n 个字符长度
LTRIM(str)                 去掉字符串 str 左侧的空格
RTRIM(str)                 去掉字符串 str 行尾的空格
TRIM(str)                  去掉字符串行尾和行头的空格
REPEAT(str,x)              返回str 重复x次的结果
REPLACE(str,a,b)           用字符串 b 替换字符串 str 中所有出现的字符串 a
STRCMP(s1,s2)              比较字符串 s1 和 s2
SUBSTRING(str,x,y)         返回从字符串 str x 位置起 y 个字符长度的字串


下面通过具体的实例来逐个地研究每个函数的用法,需要注意的是这里的例子仅仅在于说明 各个函数的使用方法,所以函数都是单个出现的,
但是在一个具体的应用中通常可能需要综 合几个甚至几类函数才能实现相应的应用。

1.CANCAT(S1,S2,...Sn)函数:
  a.把传入的参数连接成为一个字符串
  b.任何字符串与 NULL 进行连接的结果都将是 NULL

下面的例子把“aaa”、“bbb”、“ccc”3 个字符串连接成了一个字符串“aaabbbccc”:
mysql> select concat('aaa','bbb','ccc');
+---------------------------+
| concat('aaa','bbb','ccc') |
+---------------------------+
| aaabbbccc                 |
+---------------------------+
1 row in set (0.00 sec)

mysql> select concat('aaa','bbb','ccc'), concat('aaa',null);
+---------------------------+--------------------+
| concat('aaa','bbb','ccc') | concat('aaa',null) |
+---------------------------+--------------------+
| aaabbbccc                 | NULL               |
+---------------------------+--------------------+
1 row in set (0.00 sec)



2.INSERT(str ,x,y,instr)函数:
  a.将字符串 str 从第 x 位置开始,y 个字符长的子串替换为字符串 instr, 包括第x字符

下面的例子把字符串“beijing2008you”中的从第 12 个字符开始以后的 3 个字符替换成“me”
mysql> select insert('beijing2008you', 12, 3, "me");
+---------------------------------------+
| insert('beijing2008you', 12, 3, "me") |
+---------------------------------------+
| beijing2008me                         |
+---------------------------------------+
1 row in set (0.00 sec)

mysql> select insert('beijing2008you', 12, 3, "nimei");
+------------------------------------------+
| insert('beijing2008you', 12, 3, "nimei") |
+------------------------------------------+
| beijing2008nimei                         |
+------------------------------------------+
1 row in set (0.00 sec)



3.LOWER(str)和UPPER(str)函数:
  a.把字符串转换成小写或大写
  b.在字符串比较中,通常要将比较的字符串全部转换为大写或者小写

mysql> select lower('BEIJING2008'), upper('beijing2008');
+----------------------+----------------------+
| lower('BEIJING2008') | upper('beijing2008') |
+----------------------+----------------------+
| beijing2008          | BEIJING2008          |
+----------------------+----------------------+
1 row in set (0.00 sec)



4.LEFT(str,x)和 RIGHT(str,x)函数:
  a.分别返回字符串最左边的x个字符和最右边的x个字符
  b.如果第二个参数是 NULL,那么将不返回任何字符串

下例中显示了对字符串“beijing2008”应用函数后的结果
mysql> select left('beijing2008', 7), left('beijing', null), right('beijing2008', 4);
+------------------------+-----------------------+-------------------------+
| left('beijing2008', 7) | left('beijing', null) | right('beijing2008', 4) |
+------------------------+-----------------------+-------------------------+
| beijing                | NULL                  | 2008                    |
+------------------------+-----------------------+-------------------------+
1 row in set (0.00 sec)



5.LPAD(str,n,pad)和RPAD(str,n,pad)函数:
 a.用字符串pad对str最左边和最右边进行填充, 直到长度为 n 个字符长度

下例中显示了对字符串“2008”和“beijing”分别填充后的结果
mysql> select lpad('2008', 20, 'beijing'), rpad('beijing', 20, '2008');
+-----------------------------+-----------------------------+
| lpad('2008', 20, 'beijing') | rpad('beijing', 20, '2008') |
+-----------------------------+-----------------------------+
| beijingbeijingbe2008        | beijing2008200820082        |
+-----------------------------+-----------------------------+
1 row in set (0.00 sec)



6.LTRIM(str)和RTRIM(str)函数:
  a.去掉字符串str左侧和右侧空格

下例中显示了字符串“beijing”加空格进行过滤后的结果
mysql> select ltrim('       |beijing'), rtrim('beijing|        ');
+--------------------------+---------------------------+
| ltrim('       |beijing') | rtrim('beijing|        ') |
+--------------------------+---------------------------+
| |beijing                 | beijing|                  |
+--------------------------+---------------------------+
1 row in set (0.00 sec)



7.REPEAT(str,x)函数:
  a.返回str重复x次的结果

下例中对字符串“mysql”重复显示了 3 次
mysql> select repeat('mysql', 5);
+---------------------------+
| repeat('mysql', 5)        |
+---------------------------+
| mysqlmysqlmysqlmysqlmysql |
+---------------------------+
1 row in set (0.00 sec)



8.REPLACE(str,a,b)函数:
  a.用字符串b替换字符串str中所有出现的字符串a

下例中用字符串“2008”代替了字符串“beijing_2010”中的“_2010”
mysql> select replace('beijing_2010', '_2010', '2008');
+------------------------------------------+
| replace('beijing_2010', '_2010', '2008') |
+------------------------------------------+
| beijing2008                              |
+------------------------------------------+
1 row in set (0.00 sec)



9.STRCMP(s1,s2)函数:
  a.比较字符串 s1 和 s2 的ASCII码值的大小
  b.如果 s1 比 s2 小,那么返回-1
  c.如果 s1 与 s2 相等,那么返回0
  d.如果 s1 比 s2 大,那么返回 1

mysql> select strcmp('a', 'b'), strcmp('b', 'b'), strcmp('c', 'b');
+------------------+------------------+------------------+
| strcmp('a', 'b') | strcmp('b', 'b') | strcmp('c', 'b') |
+------------------+------------------+------------------+
|               -1 |                0 |                1 |
+------------------+------------------+------------------+
1 row in set (0.00 sec)

mysql> select strcmp(2,1);
+-------------+
| strcmp(2,1) |
+-------------+
|           1 |
+-------------+
1 row in set (0.00 sec)

mysql> select strcmp(2,3);
+-------------+
| strcmp(2,3) |
+-------------+
|          -1 |
+-------------+
1 row in set (0.00 sec)

mysql> select strcmp(2,2);
+-------------+
| strcmp(2,2) |
+-------------+
|           0 |
+-------------+
1 row in set (0.00 sec)



10.TRIM(str)函数:
   a.去掉目标字符串的开头和结尾的空格

下例中对字符串“$ beijing2008 $ ”进行了前后空格的过滤
mysql> select trim('    $ beijing2008 $     ');
+----------------------------------+
| trim('    $ beijing2008 $     ') |
+----------------------------------+
| $ beijing2008 $                  |
+----------------------------------+
1 row in set (0.00 sec)

mysql> select trim('     beijing2008         ');
+-----------------------------------+
| trim('     beijing2008         ') |
+-----------------------------------+
| beijing2008                       |
+-----------------------------------+
1 row in set (0.00 sec)



11.SUBSTRING(str,x,y)函数:
   a.返回从字符串str中的第x位置起y个字符长度的字串,包含第x字符
   b.此函数经常用来对给定字符串进行字串的提取

mysql> select substring('beijing2008', 8, 4), substring('beijing2008', 1, 7);
+--------------------------------+--------------------------------+
| substring('beijing2008', 8, 4) | substring('beijing2008', 1, 7) |
+--------------------------------+--------------------------------+
| 2008                           | beijing                        |
+--------------------------------+--------------------------------+
1 row in set (0.00 sec)






5.2 数值函数
MySQL 中另外一类很重要的函数就是数值函数,这些函数能处理很多数值方面的运算。可 以想象,如果没有这些函数的支持,用户在编写有关数值运算方面的代码时将会困难重重, 举个例子,如果没有 ABS 函数的话,如果要取一个数值的绝对值,就需要进行好多次判断 才能返回这个值,而数字函数能够大大 高用户的工作效率。表 5-2 中列出了在 MySQL 中 会经常使用的数值函数。
表 5-2 MySQL 中的常用数值函数
mysql> select substring('beijing2008',8,4),substring('beijing2008',1,7); +------------------------------+------------------------------+
| substring('beijing2008',8,4) | substring('beijing2008',1,7) | +------------------------------+------------------------------+
| 2008 | beijing | +------------------------------+------------------------------+
函数
 
功能
 
ABS(x)
返回 x 的绝对值
CEIL(x)
 
返回大于 x 的最大整数值
FLOOR(x)
 
返回小于 x 的最大整数值
MOD(x,y)
 
返回 x/y 的模
RAND()
 
返回0到1内的随机值
ROUND(x,y)
 
返回参数 x 的四舍五入的有 y 位小数的值
 
TRUNCATE(x,y)
返回数字 x 截断为 y 位小数的结果
 下面将结合实例对这些函数进行介绍。
  ABS(x)函数:返回x的绝对值。 下例中显示了对正数和负数分别取绝对值之后的结果
