2.2 (My)SQL 使用入门
这里用了(My)SQL 这样的标题，目的是在介绍标准 SQL 的同时，也将一些 MySQL 在标准 SQL上的扩展一同介绍给大家
希望读者看完本节后，能够对标准 SQL 的基本语法和 MySQL的部分扩展语法有所了解

2.2.1 SQL 分类
SQL 语句主要可以划分为以下 3 个类别:
 DDL（Data Definition Languages）语句：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象的定义
      常用的语句关键字主要包括 create、drop、alter等

 DML（Data Manipulation Language）语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性
      常用的语句关键字主要包括 insert、delete、udpate 和select 等

 DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句
      这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括 grant、revoke 等

2.2.2 DDL 语句

1.mysql帮助信息:
mysql> \h

For information about Percona products and services, visit:
   http://www.percona.com/
Percona Server manual: http://www.percona.com/doc/percona-server/5.6
For the MySQL Reference Manual: http://dev.mysql.com/
To buy Percona support, training, or other products, visit:
   https://www.percona.com/

List of all MySQL commands:
Note that all text commands must be first on line and end with ';'
?         (\?) Synonym for `help'.
clear     (\c) Clear the current input statement.
connect   (\r) Reconnect to the server. Optional arguments are db and host.
delimiter (\d) Set statement delimiter.
edit      (\e) Edit command with $EDITOR.
ego       (\G) Send command to mysql server, display result vertically.
exit      (\q) Exit mysql. Same as quit.
go        (\g) Send command to mysql server.
help      (\h) Display this help.
nopager   (\n) Disable pager, print to stdout.
notee     (\t) Don't write into outfile.
pager     (\P) Set PAGER [to_pager]. Print the query results via PAGER.
print     (\p) Print current command.
prompt    (\R) Change your mysql prompt.
quit      (\q) Quit mysql.
rehash    (\#) Rebuild completion hash.
source    (\.) Execute an SQL script file. Takes a file name as an argument.
status    (\s) Get status information from the server.
system    (\!) Execute a system shell command.
tee       (\T) Set outfile [to_outfile]. Append everything into given outfile.
use       (\u) Use another database. Takes database name as argument.
charset   (\C) Switch to another charset. Might be needed for processing binlog with multi-byte charsets.
warnings  (\W) Show warnings after every statement.
nowarning (\w) Don't show warnings after every statement.
resetconnection(\x) Clean session context.

For server side help, type 'help contents'


2.将mysql> 输入的所有操作追加到文件系统上文件中
mysql> tee mysql_command_record.txt

3.创建数据库
语法:
CREATE DATABASE dbname;

mysql> create database test1;
Query OK, 1 row affected (0.01 sec)

执行完创建命令后,下面有一行提示"Query OK, 1 row affected (0.00 sec)",这段提示可以分为 3 部分:
1."Query OK"表示上面的命令执行成功，读者可能奇怪，又不是执行查询操作，为什么显示查询成功？其实这是 MySQL 的一个特点,
   所有的DDL和DML(不包括 SELECT)操作执行成功后都显示“Query OK” ，这里理解为执行成功就可以了
2."1 row affected"表示操作只影响了数据库中一行的记录
3."0.00 sec"则记录了操作执行的时间

如果已经存在这个数据库，系统会提示:
mysql> create database test1;
ERROR 1007 (HY000): Can't create database 'test1'; database exists


4.查询系统中都存在哪些数据库:
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| test               |
| test1              |
+--------------------+
6 rows in set (0.00 sec)

可以发现,在上面的列表中除了刚刚创建的test1外,还有另外6个数据库,它们都是安装MySQL时系统自动创建的,其各自功能如下:
1.information_schema：主要存储了系统中的一些数据库对象信息。比如用户表信息、列信息、权限信息、字符集信息、分区信息等
2.cluster：存储了系统的集群信息
3.mysql：存储了系统的用户权限信息
4.test：系统自动创建的测试数据库，任何用户都可以使用
5.performance_schema类似于information_schema
6.sys


5.选择要操作的数据库
USE dbname

mysql> use test1;
Database changed

查看 test1 数据库中创建的所有数据表
mysql> show tables;
Empty set (0.00 sec)

由于 test1 是刚创建的数据库，还没有表，所以显示为空。命令行下面的“Empty set”表示
操作的结果集为空。如果查看一下 mysql 数据库里面的表，则可以得到以下信息:

mysql> use mysql;
Database changed
mysql> show tables;
+---------------------------+
| Tables_in_mysql           |
+---------------------------+
| columns_priv              |
| db                        |
| engine_cost               |
| event                     |
| func                      |
| general_log               |
| gtid_executed             |
| help_category             |
| help_keyword              |
| help_relation             |
| help_topic                |
| innodb_index_stats        |
| innodb_table_stats        |
| ndb_binlog_index          |
| plugin                    |
| proc                      |
| procs_priv                |
| proxies_priv              |
| server_cost               |
| servers                   |
| slave_master_info         |
| slave_relay_log_info      |
| slave_worker_info         |
| slow_log                  |
| tables_priv               |
| time_zone                 |
| time_zone_leap_second     |
| time_zone_name            |
| time_zone_transition      |
| time_zone_transition_type |
| user                      |
+---------------------------+
31 rows in set (0.00 sec)


6.删除数据库
语法:
drop database dbname;

例如，要删除 test1 数据库可以使用以下语句
mysql> drop database test1;
Query OK, 0 rows affected (0.00 sec)

可以发现，提示操作成功后，后面却显示了“0 rows affected” ，这个提示可以不用管它，
在MySQL 里面，drop 语句操作的结果显示都是“0 rows affected”
注意：数据库删除后，下面的所有表数据都会全部删除，所以删除前一定要仔细检查并做好相应备份.


7.创建表
在数据库中创建一张表的基本语法如下:
CREATE TABLE tablename(column_name_1 column_type_1 constraints, column_name_2 column_type_2 constrains, ..., conlumn_name_n conlumn_type_n constraints)
因为 MySQL 的表名是以目录的形式存在于磁盘上，所以表名的字符可以用任何目录名允许的字符(受限于操作系统)
column_name 是列的名字，column_type 是列的数据类型，contraints 是这个列的约束条件

mysql> create database test1;
Query OK, 1 row affected (0.00 sec)

mysql> use test1;
Database changed

mysql> create table emp(ename varchar(10), hiredate date, sal decimal(10,2), deptno int(2)); 
Query OK, 0 rows affected (0.04 sec)


8.查看表的定义
语法:
DESC tablename

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(10)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
4 rows in set (0.00 sec)


虽然 desc 命令可以查看表定义，但是其输出的信息还是不够全面，为了查看更全面的表定
义信息，有时就需要通过查看创建表的 SQL 语句来得到，可以使用如下命令实现:
mysql> show create table emp \G
*************************** 1. row ***************************
       Table: emp
Create Table: CREATE TABLE `emp` (
  `ename` varchar(10) COLLATE utf8_bin DEFAULT NULL,
  `hiredate` date DEFAULT NULL,
  `sal` decimal(10,2) DEFAULT NULL,
  `deptno` int(2) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin
1 row in set (0.00 sec)

从上面表的创建 SQL 语句中, 除了可以看到表定义以外, 还可以看到表的 engine(存储引擎)和 charset(字符集)等信息
“\G”选项的含义是使得记录能够按照字段竖着排列，对于内容比较长的记录更易于显示


9.删除表
语法:
DROP TABLE tablename

mysql> drop table emp;
Query OK, 0 rows affected (0.01 sec)


10.修改表
由于做上面的实验将表删除，这里使用查看表的定义进行创建表
mysql> show create table emp \G
mysql> CREATE TABLE `emp` (   `ename` varchar(10) COLLATE utf8_bin DEFAULT NULL,   `hiredate` date DEFAULT NULL,   `sal` decimal(10,2) DEFAULT NULL,   `deptno` int(2) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
Query OK, 0 rows affected (0.02 sec)


对于已经创建好的表,尤其是已经有大量数据的表,如果需要对表做一些结构上的改变,我们可以先将表删除(drop),然后再按照新的表定义重建表这样做没有问题，但是必然要做一些额外的工作，比如数据的重新加载。而且，如果有服务在访问表，也会对服务产生影响
因此， 在大多数情况下， 表结构的更改一般都使用 alter table 语句， 以下是一些常用的命令:

1) 修改表类型，语法如下
ALTER TABLE tablename MODIFY [COLUMN] column_definition [FIRST | AFTER col_name]

例如，修改表 emp 的 ename 字段定义，将 varchar(10)改为 varchar(20)：
mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(10)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
4 rows in set (0.00 sec)


mysql> alter table emp modify ename varchar(20); 
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
4 rows in set (0.00 sec)


2) 增加表字段，语法如下
ALTER TABLE tablename ADD [COLUMN] column_definition [FIRST | AFTER col_name]

例如，表 emp 上新增加字段 age，类型为 int(3)：

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> alter table emp add age int(3);
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(3)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.00 sec)


3) 删除表字段
ALTER TABLE tablename DROP [COLUMN] col_name

例如，将字段 age 删除掉:
mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(3)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

下面2种方法都可以:
mysql> alter table emp drop column age;
mysql> alter table emp drop age;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;                       
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
4 rows in set (0.00 sec)


4) 字段改名，语法如下
语法:
ALTER TABLE tablename CHANGE [COLUMN] old_col_name column_definition [FIRST|AFTER col_name]

例如，将 age 改名为 age1，同时修改字段类型为 int(4)：
mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> alter table emp add column age int(3);
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(3)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.01 sec)

mysql> alter table emp change age age1 int(4);       
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age1     | int(4)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

注意：change 和 modify 都可以修改表的定义，不同的是 change 后面需要写两次列名，不方便
但是 change 的优点是可以修改列名称，modify 则不能

a.change可以修改表的定义,必须要写两次列名 old_column new_column new_column定义
mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age1     | int(4)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

mysql> alter table emp change age1 age int(3);
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(3)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.00 sec)


b.modify可以修改表的定义,必须要写一次列名 column_name column_name定义
mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(3)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

mysql> alter table emp modify age int(4);           
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(4)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.00 sec)



c.change可以修改列名
mysql> alter table emp change ename2 ename varchar(20);      
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0


d.modify不可以修改列名
mysql> alter table emp modify ename2 ename;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'ename' at line 1

mysql> alter table emp modify ename2 ename varchar(20);
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'ename varchar(20)' at line 1



5) 修改字段排列顺序
前面介绍的的字段增加和修改语法（ADD/CNAHGE/MODIFY）中,都有一个可选项 first|after column_name,这个选项可以用来修改字段在表中的位置
默认 ADD 增加的新字段是加在表的最后位置
CHANGE/MODIFY 默认都不会改变字段的位置

例如，将新增的字段 birth date 加在 ename 之后：
mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(4)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

使用change方式修改字段age的属性,modify修改字段的属性较优
mysql> alter table emp change age age int(3);
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(3)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
5 rows in set (0.00 sec)


添加一个字段birth放在ename字段后面
mysql> alter table emp add birth date after ename;
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| birth    | date          | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(3)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
6 rows in set (0.00 sec)


使用modify方式,将age字段放在最前面
mysql> alter table emp modify age int(3) first;
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| age      | int(3)        | YES  |     | NULL    |       |
| ename    | varchar(20)   | YES  |     | NULL    |       |
| birth    | date          | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
6 rows in set (0.00 sec)


使用change方式,将deptno字段放在最前面
mysql> alter table emp change deptno deptno int(2) first;              
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(3)        | YES  |     | NULL    |       |
| ename    | varchar(20)   | YES  |     | NULL    |       |
| birth    | date          | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
6 rows in set (0.00 sec)

注意: change/first|after column这些关键字都属于mysql在标准sql上的扩展,在其它数据库上不一定适用


6) 表改名
语法:
ALTER TABLE tablename RENAME [TO] new_tablename

mysql> alter table emp rename emp1;
Query OK, 0 rows affected (0.02 sec)

mysql> show tables;
+-----------------+
| Tables_in_test1 |
+-----------------+
| emp1            |
+-----------------+
1 row in set (0.00 sec)

mysql> desc emp;
ERROR 1146 (42S02): Table 'test1.emp' doesn't exist
mysql> desc emp1;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| deptno   | int(2)        | YES  |     | NULL    |       |
| age      | int(3)        | YES  |     | NULL    |       |
| ename    | varchar(20)   | YES  |     | NULL    |       |
| birth    | date          | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
6 rows in set (0.01 sec)



2.2.3 DML 语句
DML 操作是指对数据库中表记录的操作，主要包括表记录的插入（insert）、更新（update）、删除（delete）和查询（select），是开发人员日常使用最频繁的操作

1．插入记录
表创建好后，就可以往里插入记录了，插入记录的基本语法如下:
INSERT INTO tablename(field1,field2,...,fieldn) VALUES(value1,value2,...,valuen);

例如，向表 emp 中插入以下记录： ename 为 zzx1， hiredate 为 2000-01-01，sal 为 2000， deptno为 1，命令执行如下:
mysql> alter table emp1 rename emp;
Query OK, 0 rows affected (0.03 sec)

mysql> alter table emp drop age;
Query OK, 0 rows affected (0.06 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> alter table emp drop birth;
Query OK, 0 rows affected (0.06 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;                  
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| deptno   | int(2)        | YES  |     | NULL    |       |
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
4 rows in set (0.00 sec)


## key values如果是一一对应,则顺序是可以乱的,即不必按照上面表结构中的字段顺序来
mysql> insert into emp(ename,hiredate,sal,deptno) values('zzx1','2017-01-04','2000',1);
Query OK, 1 row affected (0.01 sec)

mysql> select * from emp;                  
+--------+-------+------------+---------+
| deptno | ename | hiredate   | sal     |
+--------+-------+------------+---------+
|      1 | zzx1  | 2017-01-04 | 2000.00 |
+--------+-------+------------+---------+
1 row in set (0.00 sec)

也可以不用指定字段名称，但是 values 后面的顺序应该和字段的排列顺序一致

mysql> alter table emp modify deptno int(2) after sal;
Query OK, 0 rows affected (0.06 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc emp;
+----------+---------------+------+-----+---------+-------+
| Field    | Type          | Null | Key | Default | Extra |
+----------+---------------+------+-----+---------+-------+
| ename    | varchar(20)   | YES  |     | NULL    |       |
| hiredate | date          | YES  |     | NULL    |       |
| sal      | decimal(10,2) | YES  |     | NULL    |       |
| deptno   | int(2)        | YES  |     | NULL    |       |
+----------+---------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> insert into emp values('lisa','2017-01-04','3000',2);
Query OK, 1 row affected (0.01 sec)

mysql> select * from emp;
+-------+------------+---------+--------+
| ename | hiredate   | sal     | deptno |
+-------+------------+---------+--------+
| zzx1  | 2017-01-04 | 2000.00 |      1 |
| lisa  | 2017-01-04 | 3000.00 |      2 |
+-------+------------+---------+--------+
2 rows in set (0.00 sec)

对于含可空字段、非空但是含有默认值的字段、自增字段，可以不用在 insert 后的字段列表里面出现，
values 后面只写对应字段名称的 value，这些没写的字段可以自动设置为 NULL、
默认值、自增的下一个数字，这样在某些情况下可以大大缩短 SQL 语句的复杂性

例如，只对表中的 ename 和 sal 字段显式插入值：
mysql> insert into emp(ename,sal) values('dony',1000);
Query OK, 1 row affected (0.00 sec)

mysql> insert into emp values('bjguan','2017-01-04','3000',1);
Query OK, 1 row affected (0.01 sec)

mysql> select * from emp;                                     
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx1   | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 3000.00 |      2 |
| dony   | NULL       | 1000.00 |   NULL |
| bjguan | 2017-01-04 | 3000.00 |      1 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)


果然，设置为可空的两个字段都显示为 NULL。
在 MySQL 中，insert 语句还有一个很好的特性，可以一次性插入多条记录，语法如下：
INSERT INTO tablename (field1, field2,……fieldn)
VALUES
(record1_value1, record1_value2,……record1_valuesn),
(record2_value1, record2_value2,……record2_valuesn),
……
(recordn_value1, recordn_value2,……recordn_valuesn)
;
可以看出，每条记录之间都用逗号进行了分隔。

下面的例子中，对表 dept 一次插入两条记录：
mysql> create table dept(deptno int(2), deptname varchar(10));
Query OK, 0 rows affected (0.03 sec)

mysql> desc dept;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| deptno   | int(2)      | YES  |     | NULL    |       |
| deptname | varchar(10) | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> show create table dept\G
*************************** 1. row ***************************
       Table: dept
Create Table: CREATE TABLE `dept` (
  `deptno` int(2) DEFAULT NULL,
  `deptname` varchar(10) COLLATE utf8_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin
1 row in set (0.00 sec)

mysql> insert into dept values(1,'tech'),(2,'sale'),(5,'fin'),(5,'dept5'),(6,'dept6');
Query OK, 5 rows affected (0.00 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from dept;
+--------+----------+
| deptno | deptname |
+--------+----------+
|      1 | tech     |
|      2 | sale     |
|      5 | fin      |
|      5 | dept5    |
|      6 | dept6    |
+--------+----------+
5 rows in set (0.00 sec)

这个特性可以使得 MySQL 在插入大量记录时，节省很多的网络开销，大大提高插入效率


2．更新记录
对于表里的记录值，可以通过 update 命令进行更改，语法如下：
UPDATE tablename SET field1=value1，field2.=value2，……fieldn=valuen [WHERE CONDITION]

例如，将表 emp 中 ename 为“lisa”的薪水（sal）从 3000 更改为 4000：
mysql> select * from emp; 
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx1   | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 3000.00 |      2 |
| dony   | NULL       | 1000.00 |   NULL |
| bjguan | 2017-01-04 | 3000.00 |      1 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> update emp set sal=4000 where ename='lisa';
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from emp;                         
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx1   | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 4000.00 |      2 |
| dony   | NULL       | 1000.00 |   NULL |
| bjguan | 2017-01-04 | 3000.00 |      1 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)


在 MySQL 中，update 命令可以同时更新多个表中数据
语法如下：
UPDATE t1,t2…tn set t1.field1=expr1,tn.fieldn=exprn [WHERE CONDITION]


在下例中，同时更新表 emp 中的字段 sal 和表 dept 中的字段 deptname：

mysql> delete from emp where ename='dony';
Query OK, 1 row affected (0.00 sec)

mysql> insert into emp values('dony','2017-01-03',2000,4);
Query OK, 1 row affected (0.00 sec)

mysql> select * from emp;                                 
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx1   | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 4000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2017-01-03 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)


mysql> select * from dept;
+--------+----------+
| deptno | deptname |
+--------+----------+
|      1 | tech     |
|      2 | sale     |
|      5 | fin      |
|      5 | dept5    |
|      6 | dept6    |
+--------+----------+
5 rows in set (0.00 sec)

mysql> delete from dept where deptname='dept5' or deptname='dept6';
Query OK, 2 rows affected (0.01 sec)

mysql> select * from dept;
+--------+----------+
| deptno | deptname |
+--------+----------+
|      1 | tech     |
|      2 | sale     |
|      5 | fin      |
+--------+----------+
3 rows in set (0.00 sec)


mysql> update emp a, dept b set a.sal=a.sal * b.deptno, b.deptname=a.ename where a.deptno=b.deptno;
Query OK, 3 rows affected (0.01 sec)
Rows matched: 5  Changed: 3  Warnings: 0


mysql> select * from emp; 
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx1   | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2017-01-03 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> select * from dept;
+--------+----------+
| deptno | deptname |
+--------+----------+
|      1 | zzx1     |
|      2 | lisa     |
|      5 | fin      |
+--------+----------+
3 rows in set (0.00 sec)

自此，两个表的数据同时进行了更新。
注意：多表更新的语法更多地用在了根据一个表的字段，来动态的更新另外一个表的字段



3．删除记录
如果记录不再需要，可以用 delete 命令进行删除，语法如下：
DELETE FROM tablename [WHERE CONDITION]

例如，在 emp 中将 ename 为‘dony’的记录全部删除，命令如下：
mysql> select * from emp; 
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx1   | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2017-01-03 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> delete from emp where ename='dony';
Query OK, 1 row affected (0.01 sec)

mysql> select * from emp;                 
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx1   | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
+--------+------------+---------+--------+
3 rows in set (0.00 sec)


在MySQL中可以一次删除多个表的数据，语法如下：
DELETE t1,t2…tn FROM t1,t2…tn [WHERE CONDITION]

如果 from 后面的表名用别名，则 delete 后面的也要用相应的别名，否则会提示语法错误
在下例中，将表 emp 和 dept 中 deptno 为 3 的记录同时都删除：
mysql> select * from emp;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| bzshen | 2014-01-01 |  300.00 |      3 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
5 rows in set (0.00 sec)


mysql> select * from dept;
+--------+----------+
| deptno | deptname |
+--------+----------+
|      1 | tech     |
|      2 | sale     |
|      3 | hr       |
|      5 | fin      |
+--------+----------+
4 rows in set (0.00 sec)


mysql> delete a,b from emp a,dept b where a.deptno=b.deptno and a.deptno=3;
Query OK, 2 rows affected (0.01 sec)

mysql> select * from emp;                                   
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> select * from dept;
+--------+----------+
| deptno | deptname |
+--------+----------+
|      1 | tech     |
|      2 | sale     |
|      5 | fin      |
+--------+----------+
3 rows in set (0.00 sec)

注意：不管是单表还是多表，不加 where 条件将会把表的所有记录删除，所以操作时一定要小心


4．查询记录
数据插入到数据库中后，就可以用 SELECT 命令进行各种各样的查询，使得输出的结果符合我们的要求。
由于 SELECT 的语法很复杂，所有这里只介绍最基本的语法：
SELECT * FROM tablename [WHERE CONDITION]

查询最简单的方式是将记录全部选出， 在下面的例子中， 将表 emp 中的记录全部查询出来：
mysql> select * from emp;                                                
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)


其中“*”表示要将所有的记录都选出来，也可以用逗号分割的所有字段来代替，例如，下面查询与上面是等价的：
mysql> select ename,hiredate,sal,deptno from emp;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.01 sec)

“*”的好处是当需要查询所有字段信息时候，查询语句很简单，但是要只查询部分字段的时候，必须要将字段一个一个列出来


上例中已经介绍了查询全部记录的语法，但是在实际应用中，用户还会遇到各种各样的查询要求，下面将分别介绍。

（1）查询不重复的记录。
有时需要将表中的记录去掉重复后显示出来，可以用 distinct 关键字来实现：
mysql> select ename,hiredate,sal,deptno from emp;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

好像只能按照某字段进行去重：
mysql> select distinct deptno from emp;
+--------+
| deptno |
+--------+
|      1 |
|      2 |
|      4 |
+--------+
3 rows in set (0.00 sec)

mysql> select distinct * from emp;      
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)


mysql> select distinct hiredate from emp;                     
+------------+
| hiredate   |
+------------+
| 2017-01-04 |
| 2015-01-01 |
+------------+
2 rows in set (0.00 sec)

mysql> select distinct hiredate,deptno from emp;
+------------+--------+
| hiredate   | deptno |
+------------+--------+
| 2017-01-04 |      1 |
| 2017-01-04 |      2 |
| 2015-01-01 |      4 |
+------------+--------+
3 rows in set (0.00 sec)



mysql> select * from emp a,dept b where a.deptno=b.deptno and a.deptno=2;  
+-------+------------+---------+--------+--------+----------+
| ename | hiredate   | sal     | deptno | deptno | deptname |
+-------+------------+---------+--------+--------+----------+
| lisa  | 2017-01-04 | 8000.00 |      2 |      2 | sale     |
+-------+------------+---------+--------+--------+----------+
1 row in set (0.00 sec)

mysql> select * from emp a,dept b where a.deptno=b.deptno and a.deptno=1;
+--------+------------+---------+--------+--------+----------+
| ename  | hiredate   | sal     | deptno | deptno | deptname |
+--------+------------+---------+--------+--------+----------+
| zzx    | 2017-01-04 | 2000.00 |      1 |      1 | tech     |
| bjguan | 2017-01-04 | 3000.00 |      1 |      1 | tech     |
+--------+------------+---------+--------+--------+----------+
2 rows in set (0.00 sec)


（2）条件查询。
在很多情况下， 用户并不需要查询所有的记录， 而只是需要根据限定条件来查询一部分数据，用 where 关键字可以来实现这样的操作

例如，需要查询所有 deptno 为 1 的记录:
mysql> select * from emp;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> select * from emp where deptno=1;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
+--------+------------+---------+--------+
2 rows in set (0.00 sec)


结果集中将符合条件的记录列出来。上面的例子中，where 后面的条件是一个字段的‘=’比较，
除了‘=’外，还可以使用>、<、>=、<=、!=等比较运算符；
多个条件之间还可以使用 or、and 等逻辑运算符进行多条件联合查询，运算符会在以后章节中详细讲解。

以下是一个使用多字段条件查询的例子：
mysql> select * from emp where deptno=1 and sal < 3000;
+-------+------------+---------+--------+
| ename | hiredate   | sal     | deptno |
+-------+------------+---------+--------+
| zzx   | 2017-01-04 | 2000.00 |      1 |
+-------+------------+---------+--------+
1 row in set (0.00 sec)



（3）排序和限制。
我们经常会有这样的需求，取出按照某个字段进行排序后的记录结果集，这就用到了数据库的排序操作，用关键字 ORDER BY 来实现，语法如下：
SELECT * FROM tablename [WHERE CONDITION] [ORDER BY field1 [DESC|ASC] ， field2[DESC|ASC]，……fieldn [DESC|ASC]]

其中，DESC 和 ASC 是排序顺序关键字，DESC 表示按照字段进行降序排列，ASC 则表示升序排列，如果不写此关键字默认是升序排列
ORDER BY 后面可以跟多个不同的排序字段，并且每个排序字段可以有不同的排序顺序

例如，把 emp 表中的记录按照工资高低进行显示:
mysql> select * from emp;                              
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> select * from emp order by sal;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
+--------+------------+---------+--------+
4 rows in set (0.01 sec)


如果排序字段的值一样，则值相同的字段按照第二个排序字段进行排序，以此类推
如果只有一个排序字段，则这些字段相同的记录将会无序排列

例如，把 emp 表中的记录按照部门编号 deptno 字段排序：
mysql> select * from emp;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> select * from emp order by deptno;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)


如果排序字段的值一样，则值相同的字段按照第二个排序字段进行排序，以此类推
对于 deptno 相同的前两条记录，如果要按照工资由高到低排序，可以使用以下命令：
mysql> select * from emp;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)


mysql> select * from emp order by deptno,sal desc;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| bjguan | 2017-01-04 | 3000.00 |      1 |
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.01 sec)



对于排序后的记录，如果希望只显示一部分，而不是全部，这时，就可以使用 LIMIT 关键字来实现
LIMIT 的语法如下：
SELECT ……[LIMIT offset_start,row_count]
其中 offset_start 表示记录的起始偏移量，row_count 表示显示的行数。
在默认情况下，起始偏移量为 0，只需要写记录行数就可以，这时候，显示的实际就是前 n条记录，看下面例子：

例如，显示 emp 表中按照 sal 排序后的前 3 条记录：
mysql> select * from emp order by sal;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

从第一条记录开始显示3条数据
mysql> select * from emp order by sal limit 3;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
+--------+------------+---------+--------+
3 rows in set (0.00 sec)



如果要显示 emp 表中按照 sal 排序后从第二条记录开始，显示 3 条记录:
mysql> select * from emp order by sal;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)


mysql> select * from emp order by sal limit 1,3;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| dony   | 2015-01-01 | 2000.00 |      4 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
+--------+------------+---------+--------+
3 rows in set (0.00 sec)

limit 经常和 order by 一起配合使用来进行记录的分页显示。
注意：limit 属于 MySQL 扩展 SQL92 后的语法，在其他数据库上并不能通用



（4）聚合
很多情况下，我们需要进行一些汇总操作，比如统计整个公司的人数或者统计每个部门的人数，这个时就要用到 SQL 的聚合操作

聚合操作的语法如下：
SELECT [field1,field2,……fieldn] fun_name
FROM tablename
[WHERE where_contition]
[GROUP BY field1,field2,……fieldn
[WITH ROLLUP]]
[HAVING where_contition]

对其参数进行以下说明:
 fun_name 表示要做的聚合操作，也就是聚合函数，常用的有 sum（求和）、count(*)（记录数）、max（最大值）、min（最小值）
  where 是在聚合前就对记录进行过滤
 GROUP BY 关键字表示要进行分类聚合的字段，比如要按照部门分类统计员工数量，部门就应该写在 group by 后面
 WITH ROLLUP 是可选语法，表明是否对分类聚合后的结果进行再汇总
 HAVING 关键字表示对分类后的结果再进行条件的过滤

注意：having 和 where 的区别在于 having 是对聚合后的结果进行条件的过滤，而 where 是在聚合前就对记录进行过滤
      如果逻辑允许,尽可能用 where 先过滤记录,因为这样结果集减小,将对聚合的效率大大提高,最后再根据逻辑看是否用 having 进行再过滤

例如，要 emp 表中统计公司的总人数:
mysql> select * from emp;                       
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> select count(*) from emp;
+----------+
| count(*) |
+----------+
|        4 |
+----------+
1 row in set (0.00 sec)

mysql> select count(1) from emp; 
+----------+
| count(1) |
+----------+
|        4 |
+----------+
1 row in set (0.00 sec)


在此基础上，要统计各个部门的人数：
mysql> select deptno,count(1) from emp group by deptno;
+--------+----------+
| deptno | count(1) |
+--------+----------+
|      1 |        2 |
|      2 |        1 |
|      4 |        1 |
+--------+----------+
3 rows in set (0.00 sec)
部门1有2个人，部门2有1个人，部门4有1个人
这里用到group by 关键字对字段进行分类聚合


此基础上，更细一些，既要统计各部门人数，又要统计总人数
mysql> select deptno,count(1) from emp group by deptno with rollup;
+--------+----------+
| deptno | count(1) |
+--------+----------+
|      1 |        2 |
|      2 |        1 |
|      4 |        1 |
|   NULL |        4 |
+--------+----------+
4 rows in set (0.00 sec)
各部门总人数总共4人
这里先用到group by 关键字对字段进行分类聚合，再用到with rollup对分类聚合后的结果进行再汇总


统计人数大于 1 人的部门：
mysql> select deptno,count(1) from emp group by deptno having count(1) > 1;
+--------+----------+
| deptno | count(1) |
+--------+----------+
|      1 |        2 |
+--------+----------+
1 row in set (0.00 sec)
这里先用到group by 关键字对字段进行分类聚合，再用到了having 关键字对分类后的结果再进行条件过滤



最后统计公司所有员工的薪水总额、最高和最低薪水
mysql> select * from emp;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> select sum(sal),max(sal),min(sal) from emp;
+----------+----------+----------+
| sum(sal) | max(sal) | min(sal) |
+----------+----------+----------+
| 15000.00 |  8000.00 |  2000.00 |
+----------+----------+----------+
1 row in set (0.00 sec)



（5）表连接
当需要同时显示多个表中的字段时，就可以用表连接来实现这样的功能。
从大类上分，表连接分为内连接和外连接，它们之间的最主要区别是:
內连接仅选出两张表中互相匹配的记录
外连接会选出其它不匹配的记录
我们最常用的是内连接

例如，查询出所有雇员的名字和所在部门名称，因为雇员名称和部门分别存放在表 emp 和dept 中，因此，需要使用表连接来进行查询
表连接之内连接：
mysql> select * from emp;
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> select * from dept;
+--------+----------+
| deptno | deptname |
+--------+----------+
|      1 | tech     |
|      2 | sale     |
|      5 | fin      |
+--------+----------+
3 rows in set (0.00 sec)

mysql> select ename,deptname from emp,dept where emp.deptno=dept.deptno;
+--------+----------+
| ename  | deptname |
+--------+----------+
| zzx    | tech     |
| lisa   | sale     |
| bjguan | tech     |
+--------+----------+
3 rows in set (0.00 sec)


mysql> select ename,deptname from emp a,dept b where a.deptno=b.deptno;     
+--------+----------+
| ename  | deptname |
+--------+----------+
| zzx    | tech     |
| lisa   | sale     |
| bjguan | tech     |
+--------+----------+
3 rows in set (0.00 sec)



外连接分为左连接和右连接，具体定义如下:
 左连接：包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录
 右连接：包含所有的右边表中的记录甚至是左边表中没有和它匹配的记录

例如，查询 emp 中所有用户名和所在部门名称：
mysql> select * from emp; 
+--------+------------+---------+--------+
| ename  | hiredate   | sal     | deptno |
+--------+------------+---------+--------+
| zzx    | 2017-01-04 | 2000.00 |      1 |
| lisa   | 2017-01-04 | 8000.00 |      2 |
| bjguan | 2017-01-04 | 3000.00 |      1 |
| dony   | 2015-01-01 | 2000.00 |      4 |
+--------+------------+---------+--------+
4 rows in set (0.00 sec)

mysql> select * from dept;
+--------+----------+
| deptno | deptname |
+--------+----------+
|      1 | tech     |
|      2 | sale     |
|      5 | fin      |
+--------+----------+
3 rows in set (0.00 sec)

'''
select field1,field2,...,fieldn from left_table_name left join right_table_name on \
left_table_name.left_table_field_name=right_table_name.right_table_field_name
'''

ON字句连接条件中表right_table.columnname=XXX用于控制right_table表是否有符合要求的列值还是用NULL替换的方式显示在查询列中，不影响记录集的数量;

mysql> select ename,deptname from emp left join dept on emp.deptno=dept.deptno;
+--------+----------+
| ename  | deptname |
+--------+----------+
| zzx    | tech     |
| bjguan | tech     |
| lisa   | sale     |
| dony   | NULL     |
+--------+----------+
4 rows in set (0.00 sec)

比较这个查询和上例中的查询，都是查询用户名和部门名，两者的区别在于本例中列出了所有的用户名，
即使有的用户名（dony）并不存在合法的部门名称（部门号为 4，在 dept 中没有这个部门）；
而上例中仅仅列出了存在合法部门的用户名和部门名称。

右连接和左连接类似， 两者之间可以互相转化， 例如， 上面的例子可以改写为如下的右连接：
'''
select left_table_field1,right_table_field1,...,fieldn from right_table_name right join left_table_name on \
right_table_name.right_table_field_name=left_table_name.left_table_field_name
'''

mysql> select ename,deptname from dept right join emp on dept.deptno=emp.deptno;    
+--------+----------+
| ename  | deptname |
+--------+----------+
| zzx    | tech     |
| bjguan | tech     |
| lisa   | sale     |
| dony   | NULL     |
+--------+----------+
4 rows in set (0.00 sec)

mysql外连接之左连接总结:
http://database.51cto.com/art/201011/234443.htm
http://blog.csdn.net/wyzxg/article/details/7276979




dbdao在线学习平台:
http://www.dbdao.com

mysql调优:
http://www.dbdao.com/mysql-dba-road/mysql-query-tuning/1

认证:
http://www.askmaclean.com/archives/oracle%E8%AE%A4%E8%AF%81%EF%BC%9A%E7%BB%8F%E5%B8%B8%E9%97%AE%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98oca-ocp-oce-ocm.html

下载oracle这本书:
http://down.51cto.com/data/429298
Oracle Core Essential Internals for DBAs and Developers.pdf



